// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeScript Express server generator produces valid code multi-file: endpoint:createUser 1`] = `
"import { CreateUserRequest, CreateUserResponse } from \\"../types\\";

export async function createUser(request: CreateUserRequest, authToken: string | void): Promise<{
    error?: void;
    status: number;
    data: CreateUserResponse;
} | {
    error: string;
    status?: number;
    data?: void;
}> {
    throw new Error(\\"Endpoint createUser is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code multi-file: endpoint:deleteUser 1`] = `
"export async function deleteUser(userId: number, authToken: string): Promise<{
    error?: void;
    status: number;
    data: null;
} | {
    error: \\"forbidden\\";
    status?: void;
    data: {
        message: string;
        signedInAs: string;
    };
} | {
    error: string;
    status?: number;
    data: {
        message: string;
    };
}> {
    throw new Error(\\"Endpoint deleteUser is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code multi-file: endpoint:findUsers 1`] = `
"export async function findUsers(): Promise<{
    error?: void;
    status: number;
    data: {
        name: string;
        age?: number;
    }[];
} | {
    error: string;
    status?: number;
    data?: void;
}> {
    throw new Error(\\"Endpoint findUsers is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code multi-file: endpoint:getUser 1`] = `
"export async function getUser(userId: number): Promise<{
    error?: void;
    status: number;
    data: {
        name: string;
        age?: number;
    };
} | {
    error: string;
    status?: number;
    data?: void;
}> {
    throw new Error(\\"Endpoint getUser is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code multi-file: server 1`] = `
"import * as cors from \\"cors\\";

import * as express from \\"express\\";

import * as validators from \\"./validators\\";

import { createUser } from \\"./endpoints/createUser\\";

import { deleteUser } from \\"./endpoints/deleteUser\\";

import { findUsers } from \\"./endpoints/findUsers\\";

import { getUser } from \\"./endpoints/getUser\\";

const PORT = 3020;

const app = express();

app.use(cors());

app.use(express.json());

app.post(\\"/users/create\\", async (req, res) => {
    const request = req.body;
    if (!validators.validateCreateUser_request(request)) {
        throw new Error(\`Invalid request: \${JSON.stringify(request, null, 2)}\`);
    }
    const authToken = req.headers[\\"Authorization\\"];
    if (!validators.validateCreateUser_headerAuthToken(authToken)) {
        throw new Error(\`Invalid header Authorization: \${JSON.stringify(authToken, null, 2)}\`);
    }
    try {
        const response = await createUser(request, authToken);
        if (\\"error\\" in response) {
            res.status(response.status || 500);
            res.end();
        }
        else {
            if (!validators.validateCreateUser_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint createUser threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.delete(\\"/users/:userId-confirmed\\", async (req, res) => {
    const userId = req.params.userId;
    if (!validators.validateDeleteUser_paramUserId(userId)) {
        throw new Error(\`Invalid path parameter userId: \${JSON.stringify(userId, null, 2)}\`);
    }
    const authToken = req.headers[\\"Authorization\\"];
    if (!validators.validateDeleteUser_headerAuthToken(authToken)) {
        throw new Error(\`Invalid header Authorization: \${JSON.stringify(authToken, null, 2)}\`);
    }
    try {
        const response = await deleteUser(userId, authToken);
        if (response.error === \\"forbidden\\") {
            if (!validators.validateDeleteUser_specificErrorForbidden(response.data)) {
                throw new Error(\`Invalid error response for specific error forbidden: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(403);
            res.json(response.data);
            return;
        }
        if (\\"error\\" in response) {
            if (!validators.validateDeleteUser_genericError(response.data)) {
                throw new Error(\`Invalid error response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 500);
            res.json(response.data);
        }
        else {
            if (!validators.validateDeleteUser_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint deleteUser threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.get(\\"/users\\", async (req, res) => {
    try {
        const response = await findUsers();
        if (\\"error\\" in response) {
            res.status(response.status || 500);
            res.end();
        }
        else {
            if (!validators.validateFindUsers_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint findUsers threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.get(\\"/users/:userId\\", async (req, res) => {
    const userId = req.params.userId;
    if (!validators.validateGetUser_paramUserId(userId)) {
        throw new Error(\`Invalid path parameter userId: \${JSON.stringify(userId, null, 2)}\`);
    }
    try {
        const response = await getUser(userId);
        if (\\"error\\" in response) {
            res.status(response.status || 500);
            res.end();
        }
        else {
            if (!validators.validateGetUser_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint getUser threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.listen(PORT, () => {
    console.log(\`Listening on port \${PORT}\`);
});"
`;

exports[`TypeScript Express server generator produces valid code single-file: endpoint:createUser 1`] = `
"import { CreateUserRequest, CreateUserResponse } from \\"../types\\";

export async function createUser(request: CreateUserRequest, authToken: string | void): Promise<{
    error?: void;
    status: number;
    data: CreateUserResponse;
} | {
    error: string;
    status?: number;
    data?: void;
}> {
    throw new Error(\\"Endpoint createUser is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code single-file: endpoint:deleteUser 1`] = `
"export async function deleteUser(userId: number, authToken: string): Promise<{
    error?: void;
    status: number;
    data: null;
} | {
    error: \\"forbidden\\";
    status?: void;
    data: {
        message: string;
        signedInAs: string;
    };
} | {
    error: string;
    status?: number;
    data: {
        message: string;
    };
}> {
    throw new Error(\\"Endpoint deleteUser is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code single-file: endpoint:findUsers 1`] = `
"export async function findUsers(): Promise<{
    error?: void;
    status: number;
    data: {
        name: string;
        age?: number;
    }[];
} | {
    error: string;
    status?: number;
    data?: void;
}> {
    throw new Error(\\"Endpoint findUsers is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code single-file: endpoint:getUser 1`] = `
"export async function getUser(userId: number): Promise<{
    error?: void;
    status: number;
    data: {
        name: string;
        age?: number;
    };
} | {
    error: string;
    status?: number;
    data?: void;
}> {
    throw new Error(\\"Endpoint getUser is not yet implemented!\\");
}"
`;

exports[`TypeScript Express server generator produces valid code single-file: server 1`] = `
"import * as cors from \\"cors\\";

import * as express from \\"express\\";

import * as validators from \\"./validators\\";

import { createUser } from \\"./endpoints/createUser\\";

import { findUsers } from \\"./endpoints/findUsers\\";

import { getUser } from \\"./endpoints/getUser\\";

import { deleteUser } from \\"./endpoints/deleteUser\\";

const PORT = 3020;

const app = express();

app.use(cors());

app.use(express.json());

app.post(\\"/users/create\\", async (req, res) => {
    const request = req.body;
    if (!validators.validateCreateUser_request(request)) {
        throw new Error(\`Invalid request: \${JSON.stringify(request, null, 2)}\`);
    }
    const authToken = req.headers[\\"Authorization\\"];
    if (!validators.validateCreateUser_headerAuthToken(authToken)) {
        throw new Error(\`Invalid header Authorization: \${JSON.stringify(authToken, null, 2)}\`);
    }
    try {
        const response = await createUser(request, authToken);
        if (\\"error\\" in response) {
            res.status(response.status || 500);
            res.end();
        }
        else {
            if (!validators.validateCreateUser_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint createUser threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.get(\\"/users\\", async (req, res) => {
    try {
        const response = await findUsers();
        if (\\"error\\" in response) {
            res.status(response.status || 500);
            res.end();
        }
        else {
            if (!validators.validateFindUsers_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint findUsers threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.get(\\"/users/:userId\\", async (req, res) => {
    const userId = req.params.userId;
    if (!validators.validateGetUser_paramUserId(userId)) {
        throw new Error(\`Invalid path parameter userId: \${JSON.stringify(userId, null, 2)}\`);
    }
    try {
        const response = await getUser(userId);
        if (\\"error\\" in response) {
            res.status(response.status || 500);
            res.end();
        }
        else {
            if (!validators.validateGetUser_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint getUser threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.delete(\\"/users/:userId-confirmed\\", async (req, res) => {
    const userId = req.params.userId;
    if (!validators.validateDeleteUser_paramUserId(userId)) {
        throw new Error(\`Invalid path parameter userId: \${JSON.stringify(userId, null, 2)}\`);
    }
    const authToken = req.headers[\\"Authorization\\"];
    if (!validators.validateDeleteUser_headerAuthToken(authToken)) {
        throw new Error(\`Invalid header Authorization: \${JSON.stringify(authToken, null, 2)}\`);
    }
    try {
        const response = await deleteUser(userId, authToken);
        if (response.error === \\"forbidden\\") {
            if (!validators.validateDeleteUser_specificErrorForbidden(response.data)) {
                throw new Error(\`Invalid error response for specific error forbidden: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(403);
            res.json(response.data);
            return;
        }
        if (\\"error\\" in response) {
            if (!validators.validateDeleteUser_genericError(response.data)) {
                throw new Error(\`Invalid error response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 500);
            res.json(response.data);
        }
        else {
            if (!validators.validateDeleteUser_response(response.data)) {
                throw new Error(\`Invalid successful response: \${JSON.stringify(response.data, null, 2)}\`);
            }
            res.status(response.status || 200);
            res.json(response.data);
        }
    }
    catch (e) {
        console.error(\\"Endpoint deleteUser threw an unexpected error:\\\\n\\", e);
        res.status(500);
        res.json(\\"An unknown server error has occurred.\\");
    }
});

app.listen(PORT, () => {
    console.log(\`Listening on port \${PORT}\`);
});"
`;
