// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OpenAPI 2 generator produces valid code multi-file: json 1`] = `
"{
  \\"swagger\\": \\"2.0\\",
  \\"tags\\": [
    {
      \\"name\\": \\"users\\"
    }
  ],
  \\"info\\": {
    \\"version\\": \\"0.0.0\\",
    \\"title\\": \\"My API\\",
    \\"contact\\": {
      \\"name\\": \\"TODO\\"
    }
  },
  \\"paths\\": {
    \\"/users/create\\": {
      \\"post\\": {
        \\"operationId\\": \\"createUser\\",
        \\"description\\": \\"This is an endpoint to create a user\\",
        \\"consumes\\": [
          \\"application/json\\"
        ],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"body\\",
            \\"name\\": \\"body\\",
            \\"description\\": \\"TODO\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/CreateUserRequest\\"
            }
          },
          {
            \\"in\\": \\"header\\",
            \\"name\\": \\"Authorization\\",
            \\"description\\": \\"This is the authorization token\\",
            \\"type\\": \\"string\\",
            \\"required\\": false
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/CreateUserResponse\\"
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"description\\": \\"\\"
          }
        }
      }
    },
    \\"/users/{userId}-confirmed\\": {
      \\"delete\\": {
        \\"operationId\\": \\"deleteUser\\",
        \\"description\\": \\"\\",
        \\"consumes\\": [],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"path\\",
            \\"name\\": \\"userId\\",
            \\"description\\": \\"\\",
            \\"type\\": \\"integer\\",
            \\"format\\": \\"int64\\",
            \\"required\\": true
          },
          {
            \\"in\\": \\"header\\",
            \\"name\\": \\"Authorization\\",
            \\"description\\": \\"\\",
            \\"type\\": \\"string\\",
            \\"required\\": true
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"\\"
          },
          \\"403\\": {
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ForbiddenError\\"
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/BaseError\\"
            },
            \\"description\\": \\"\\"
          }
        }
      }
    },
    \\"/users\\": {
      \\"get\\": {
        \\"operationId\\": \\"findUsers\\",
        \\"description\\": \\"\\",
        \\"consumes\\": [],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"query\\",
            \\"name\\": \\"limit\\",
            \\"description\\": \\"Limit number of returned results\\",
            \\"type\\": \\"integer\\",
            \\"format\\": \\"int32\\",
            \\"required\\": true
          },
          {
            \\"in\\": \\"query\\",
            \\"name\\": \\"search_term\\",
            \\"description\\": \\"\\",
            \\"type\\": \\"string\\",
            \\"required\\": false
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"type\\": \\"object\\",
                \\"properties\\": {
                  \\"name\\": {
                    \\"type\\": \\"string\\"
                  },
                  \\"age\\": {
                    \\"type\\": \\"number\\",
                    \\"format\\": \\"float\\"
                  }
                },
                \\"required\\": [
                  \\"name\\"
                ]
              }
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"description\\": \\"\\"
          }
        }
      }
    },
    \\"/users/{userId}\\": {
      \\"get\\": {
        \\"operationId\\": \\"getUser\\",
        \\"description\\": \\"\\",
        \\"consumes\\": [],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"path\\",
            \\"name\\": \\"userId\\",
            \\"description\\": \\"User unique identifier\\",
            \\"type\\": \\"integer\\",
            \\"format\\": \\"int64\\",
            \\"required\\": true
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"schema\\": {
              \\"type\\": \\"object\\",
              \\"properties\\": {
                \\"name\\": {
                  \\"type\\": \\"string\\"
                },
                \\"age\\": {
                  \\"type\\": \\"number\\",
                  \\"format\\": \\"float\\"
                }
              },
              \\"required\\": [
                \\"name\\"
              ]
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"description\\": \\"\\"
          }
        }
      }
    }
  },
  \\"definitions\\": {
    \\"CreateUserRequest\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"name\\": {
          \\"type\\": \\"string\\"
        },
        \\"roles\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"admin\\",
            \\"member\\"
          ]
        }
      },
      \\"required\\": [
        \\"name\\",
        \\"roles\\"
      ]
    },
    \\"CreateUserResponse\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"success\\": {
          \\"type\\": \\"boolean\\"
        },
        \\"created_at\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        }
      },
      \\"required\\": [
        \\"success\\",
        \\"created_at\\"
      ]
    },
    \\"BaseError\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"message\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"message\\"
      ]
    },
    \\"ForbiddenError\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"message\\": {
          \\"type\\": \\"string\\"
        },
        \\"signedInAs\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"message\\",
        \\"signedInAs\\"
      ]
    }
  }
}"
`;

exports[`OpenAPI 2 generator produces valid code multi-file: yaml 1`] = `
"swagger: '2.0'
tags:
  - name: users
info:
  version: 0.0.0
  title: My API
  contact:
    name: TODO
paths:
  /users/create:
    post:
      operationId: createUser
      description: This is an endpoint to create a user
      consumes:
        - application/json
      tags:
        - users
      parameters:
        - in: body
          name: body
          description: TODO
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
        - in: header
          name: Authorization
          description: This is the authorization token
          type: string
          required: false
      responses:
        '200':
          schema:
            $ref: '#/definitions/CreateUserResponse'
          description: ''
        default:
          description: ''
  '/users/{userId}-confirmed':
    delete:
      operationId: deleteUser
      description: ''
      consumes: []
      tags:
        - users
      parameters:
        - in: path
          name: userId
          description: ''
          type: integer
          format: int64
          required: true
        - in: header
          name: Authorization
          description: ''
          type: string
          required: true
      responses:
        '200':
          description: ''
        '403':
          schema:
            $ref: '#/definitions/ForbiddenError'
          description: ''
        default:
          schema:
            $ref: '#/definitions/BaseError'
          description: ''
  /users:
    get:
      operationId: findUsers
      description: ''
      consumes: []
      tags:
        - users
      parameters:
        - in: query
          name: limit
          description: Limit number of returned results
          type: integer
          format: int32
          required: true
        - in: query
          name: search_term
          description: ''
          type: string
          required: false
      responses:
        '200':
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                age:
                  type: number
                  format: float
              required:
                - name
          description: ''
        default:
          description: ''
  '/users/{userId}':
    get:
      operationId: getUser
      description: ''
      consumes: []
      tags:
        - users
      parameters:
        - in: path
          name: userId
          description: User unique identifier
          type: integer
          format: int64
          required: true
      responses:
        '200':
          schema:
            type: object
            properties:
              name:
                type: string
              age:
                type: number
                format: float
            required:
              - name
          description: ''
        default:
          description: ''
definitions:
  CreateUserRequest:
    type: object
    properties:
      name:
        type: string
      roles:
        type: string
        enum:
          - admin
          - member
    required:
      - name
      - roles
  CreateUserResponse:
    type: object
    properties:
      success:
        type: boolean
      created_at:
        type: string
        format: date-time
    required:
      - success
      - created_at
  BaseError:
    type: object
    properties:
      message:
        type: string
    required:
      - message
  ForbiddenError:
    type: object
    properties:
      message:
        type: string
      signedInAs:
        type: string
    required:
      - message
      - signedInAs
"
`;

exports[`OpenAPI 2 generator produces valid code single-file: json 1`] = `
"{
  \\"swagger\\": \\"2.0\\",
  \\"tags\\": [
    {
      \\"name\\": \\"users\\"
    }
  ],
  \\"info\\": {
    \\"version\\": \\"0.0.0\\",
    \\"title\\": \\"My API\\",
    \\"contact\\": {
      \\"name\\": \\"TODO\\"
    }
  },
  \\"paths\\": {
    \\"/users/create\\": {
      \\"post\\": {
        \\"operationId\\": \\"createUser\\",
        \\"description\\": \\"This is an endpoint to create a user\\",
        \\"consumes\\": [
          \\"application/json\\"
        ],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"body\\",
            \\"name\\": \\"body\\",
            \\"description\\": \\"TODO\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/CreateUserRequest\\"
            }
          },
          {
            \\"in\\": \\"header\\",
            \\"name\\": \\"Authorization\\",
            \\"description\\": \\"This is the authorization token\\",
            \\"type\\": \\"string\\",
            \\"required\\": false
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/CreateUserResponse\\"
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"description\\": \\"\\"
          }
        }
      }
    },
    \\"/users\\": {
      \\"get\\": {
        \\"operationId\\": \\"findUsers\\",
        \\"description\\": \\"\\",
        \\"consumes\\": [],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"query\\",
            \\"name\\": \\"limit\\",
            \\"description\\": \\"Limit number of returned results\\",
            \\"type\\": \\"integer\\",
            \\"format\\": \\"int32\\",
            \\"required\\": true
          },
          {
            \\"in\\": \\"query\\",
            \\"name\\": \\"search_term\\",
            \\"description\\": \\"\\",
            \\"type\\": \\"string\\",
            \\"required\\": false
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"type\\": \\"object\\",
                \\"properties\\": {
                  \\"name\\": {
                    \\"type\\": \\"string\\"
                  },
                  \\"age\\": {
                    \\"type\\": \\"number\\",
                    \\"format\\": \\"float\\"
                  }
                },
                \\"required\\": [
                  \\"name\\"
                ]
              }
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"description\\": \\"\\"
          }
        }
      }
    },
    \\"/users/{userId}\\": {
      \\"get\\": {
        \\"operationId\\": \\"getUser\\",
        \\"description\\": \\"\\",
        \\"consumes\\": [],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"path\\",
            \\"name\\": \\"userId\\",
            \\"description\\": \\"User unique identifier\\",
            \\"type\\": \\"integer\\",
            \\"format\\": \\"int64\\",
            \\"required\\": true
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"schema\\": {
              \\"type\\": \\"object\\",
              \\"properties\\": {
                \\"name\\": {
                  \\"type\\": \\"string\\"
                },
                \\"age\\": {
                  \\"type\\": \\"number\\",
                  \\"format\\": \\"float\\"
                }
              },
              \\"required\\": [
                \\"name\\"
              ]
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"description\\": \\"\\"
          }
        }
      }
    },
    \\"/users/{userId}-confirmed\\": {
      \\"delete\\": {
        \\"operationId\\": \\"deleteUser\\",
        \\"description\\": \\"\\",
        \\"consumes\\": [],
        \\"tags\\": [
          \\"users\\"
        ],
        \\"parameters\\": [
          {
            \\"in\\": \\"path\\",
            \\"name\\": \\"userId\\",
            \\"description\\": \\"\\",
            \\"type\\": \\"integer\\",
            \\"format\\": \\"int64\\",
            \\"required\\": true
          },
          {
            \\"in\\": \\"header\\",
            \\"name\\": \\"Authorization\\",
            \\"description\\": \\"\\",
            \\"type\\": \\"string\\",
            \\"required\\": true
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"\\"
          },
          \\"403\\": {
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ForbiddenError\\"
            },
            \\"description\\": \\"\\"
          },
          \\"default\\": {
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/BaseError\\"
            },
            \\"description\\": \\"\\"
          }
        }
      }
    }
  },
  \\"definitions\\": {
    \\"CreateUserRequest\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"name\\": {
          \\"type\\": \\"string\\"
        },
        \\"roles\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"admin\\",
            \\"member\\"
          ]
        }
      },
      \\"required\\": [
        \\"name\\",
        \\"roles\\"
      ]
    },
    \\"CreateUserResponse\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"success\\": {
          \\"type\\": \\"boolean\\"
        },
        \\"created_at\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        }
      },
      \\"required\\": [
        \\"success\\",
        \\"created_at\\"
      ]
    },
    \\"BaseError\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"message\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"message\\"
      ]
    },
    \\"ForbiddenError\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"message\\": {
          \\"type\\": \\"string\\"
        },
        \\"signedInAs\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"message\\",
        \\"signedInAs\\"
      ]
    }
  }
}"
`;

exports[`OpenAPI 2 generator produces valid code single-file: yaml 1`] = `
"swagger: '2.0'
tags:
  - name: users
info:
  version: 0.0.0
  title: My API
  contact:
    name: TODO
paths:
  /users/create:
    post:
      operationId: createUser
      description: This is an endpoint to create a user
      consumes:
        - application/json
      tags:
        - users
      parameters:
        - in: body
          name: body
          description: TODO
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
        - in: header
          name: Authorization
          description: This is the authorization token
          type: string
          required: false
      responses:
        '200':
          schema:
            $ref: '#/definitions/CreateUserResponse'
          description: ''
        default:
          description: ''
  /users:
    get:
      operationId: findUsers
      description: ''
      consumes: []
      tags:
        - users
      parameters:
        - in: query
          name: limit
          description: Limit number of returned results
          type: integer
          format: int32
          required: true
        - in: query
          name: search_term
          description: ''
          type: string
          required: false
      responses:
        '200':
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                age:
                  type: number
                  format: float
              required:
                - name
          description: ''
        default:
          description: ''
  '/users/{userId}':
    get:
      operationId: getUser
      description: ''
      consumes: []
      tags:
        - users
      parameters:
        - in: path
          name: userId
          description: User unique identifier
          type: integer
          format: int64
          required: true
      responses:
        '200':
          schema:
            type: object
            properties:
              name:
                type: string
              age:
                type: number
                format: float
            required:
              - name
          description: ''
        default:
          description: ''
  '/users/{userId}-confirmed':
    delete:
      operationId: deleteUser
      description: ''
      consumes: []
      tags:
        - users
      parameters:
        - in: path
          name: userId
          description: ''
          type: integer
          format: int64
          required: true
        - in: header
          name: Authorization
          description: ''
          type: string
          required: true
      responses:
        '200':
          description: ''
        '403':
          schema:
            $ref: '#/definitions/ForbiddenError'
          description: ''
        default:
          schema:
            $ref: '#/definitions/BaseError'
          description: ''
definitions:
  CreateUserRequest:
    type: object
    properties:
      name:
        type: string
      roles:
        type: string
        enum:
          - admin
          - member
    required:
      - name
      - roles
  CreateUserResponse:
    type: object
    properties:
      success:
        type: boolean
      created_at:
        type: string
        format: date-time
    required:
      - success
      - created_at
  BaseError:
    type: object
    properties:
      message:
        type: string
    required:
      - message
  ForbiddenError:
    type: object
    properties:
      message:
        type: string
      signedInAs:
        type: string
    required:
      - message
      - signedInAs
"
`;
